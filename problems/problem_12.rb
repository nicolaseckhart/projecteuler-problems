require 'prime'

class Problem12
  NUMBER_OF_DIVISORS = 500
  TITLE = 'PROBLEM 12: Highly divisible triangular number'.freeze
  DESCRIPTION = 'The sequence of triangle numbers is generated by adding the natural numbers. So '\
                'the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten t'\
                "erms would be: \n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the f"\
                "actors of the first seven triangle numbers:\n\n1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2"\
                ",5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n\nWe can see that 28 is th"\
                "e first triangle number to have over five divisors.\nWhat is the value of the fi"\
                "rst triangle number to have over five hundred divisors?\n".freeze

  def solve
    print_problem
    triangle_number, cache = nil
    1.step do |i|
      # This caching saves about 4 - 5 seconds with 500 divisors
      if cache.nil?
        cache = (1..i).inject(:+)
        triangle_number = cache
      else
        triangle_number = (cache + i)
        cache = triangle_number
      end
      break if divisors(triangle_number).count > NUMBER_OF_DIVISORS
    end
    print_result(triangle_number)
  end

  def divisors(number)
    return [] if number.odd?
    primes, powers = number.prime_division.transpose
    exponents = powers.map { |i| (0..i).to_a }
    divisors = exponents.shift.product(*exponents).map do |powers|
      primes.zip(powers).map { |prime, power| prime**power }.inject(:*)
    end
    divisors.sort
  end

  def print_problem
    puts TITLE
    puts DESCRIPTION
  end

  def print_result(result)
    puts "\nThe first triangle number with over #{NUMBER_OF_DIVISORS} divisors is #{result}."
  end
end

problem = Problem12.new
problem.solve
